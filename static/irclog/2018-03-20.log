<li class="join">[<a href="#T00:00:53" id="T00:00:53"><abbr title="2018-03-20T00:00:53+00:00">00:00:53</abbr></a>] <span>* BeagleBot (~PircBot@52.26.75.20) has joined #beagle</span></li>
<li class="topic">[<abbr title="2018-03-20T00:00:53+00:00">00:00:53</abbr>] <span>* Topic is '<a href="http://bbb.io/chat">http://bbb.io/chat</a> has a guide on how to ask questions and links to the logs | never ask to ask, just ask | be patient | pastebin a boot log | <a href="http://bbb.io/boot">http://bbb.io/boot</a> | <a href="http://bbb.io/start">http://bbb.io/start</a> | <a href="http://bbb.io/latest">http://bbb.io/latest</a> | <a href="http://bbb.io/bone101">http://bbb.io/bone101</a> | books: <a href="http://bbb.io/books'">http://bbb.io/books'</a></span></li>
<li class="topic">[<abbr title="2018-03-20T00:00:53+00:00">00:00:53</abbr>] <span>* Set by jkridner!~jkridner@pdpc/supporter/active/jkridner on Wed May 24 15:57:17 UTC 2017</span></li>
<li class="join">[<abbr title="2018-03-20T00:00:53+00:00">00:00:53</abbr>] <span>* BeagleBot (~PircBot@52.26.75.20) has joined #beagleboard</span></li>
<li class="join">[<abbr title="2018-03-20T00:00:53+00:00">00:00:53</abbr>] <span>* BeagleBot (~PircBot@52.26.75.20) has joined #beaglebone</span></li>
<li class="message">[<a href="#T00:02:22" id="T00:02:22"><abbr title="2018-03-20T00:02:22+00:00">00:02:22</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>sbco &amp;r10, c24, 0, 8*4    is basically   memcpy( c24+0, &amp;r10, 8*4 );   if we pretended for a moment you could pass a pointer into the register file to memcpy ;)</q></li>
<li class="message">[<a href="#T00:03:03" id="T00:03:03"><abbr title="2018-03-20T00:03:03+00:00">00:03:03</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>c24 is a constant register that is zero by default</q></li>
<li class="message">[<a href="#T00:03:32" id="T00:03:32"><abbr title="2018-03-20T00:03:32+00:00">00:03:32</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Nice! I didn't realize you added that bit at the bottom.</q></li>
<li class="message">[<a href="#T00:04:40" id="T00:04:40"><abbr title="2018-03-20T00:04:40+00:00">00:04:40</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>So I'll need to set c24 to the correct address?</q></li>
<li class="message">[<a href="#T00:04:41" id="T00:04:41"><abbr title="2018-03-20T00:04:41+00:00">00:04:41</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Just like in your example?</q></li>
<li class="message">[<a href="#T00:05:03" id="T00:05:03"><abbr title="2018-03-20T00:05:03+00:00">00:05:03</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>oh I just showed this for testing</q></li>
<li class="message">[<a href="#T00:05:12" id="T00:05:12"><abbr title="2018-03-20T00:05:12+00:00">00:05:12</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>What is a constant register anyway?</q></li>
<li class="message">[<a href="#T00:05:19" id="T00:05:19"><abbr title="2018-03-20T00:05:19+00:00">00:05:19</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Seems pointless</q></li>
<li class="message">[<a href="#T00:05:32" id="T00:05:32"><abbr title="2018-03-20T00:05:32+00:00">00:05:32</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>i.e. this just stores the data into the pru core's local dram</q></li>
<li class="message">[<a href="#T00:05:41" id="T00:05:41"><abbr title="2018-03-20T00:05:41+00:00">00:05:41</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Gotcha,</q></li>
<li class="message">[<a href="#T00:05:42" id="T00:05:42"><abbr title="2018-03-20T00:05:42+00:00">00:05:42</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>so you can access it in python via   core.dram.map( c_uint32 * 8 )</q></li>
<li class="message">[<a href="#T00:06:10" id="T00:06:10"><abbr title="2018-03-20T00:06:10+00:00">00:06:10</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>So it stores it in dram address 0?</q></li>
<li class="message">[<a href="#T00:06:52" id="T00:06:52"><abbr title="2018-03-20T00:06:52+00:00">00:06:52</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>the constant registers are various useful base addresses for load/store instructions.  here's the list for the am335x: <a href="https://pastebin.com/raw/JRZefuT3">https://pastebin.com/raw/JRZefuT3</a></q></li>
<li class="message">[<a href="#T00:07:15" id="T00:07:15"><abbr title="2018-03-20T00:07:15+00:00">00:07:15</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>yes</q></li>
<li class="message">[<a href="#T00:07:55" id="T00:07:55"><abbr title="2018-03-20T00:07:55+00:00">00:07:55</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Oh, I see. That is nice to have</q></li>
<li class="message">[<a href="#T00:08:06" id="T00:08:06"><abbr title="2018-03-20T00:08:06+00:00">00:08:06</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>you can of course also use a normal register as base address instead of a constant register (the instruction then becomes sbbo instead of sbco)</q></li>
<li class="message">[<a href="#T00:08:20" id="T00:08:20"><abbr title="2018-03-20T00:08:20+00:00">00:08:20</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Ok,</q></li>
<li class="message">[<a href="#T00:08:39" id="T00:08:39"><abbr title="2018-03-20T00:08:39+00:00">00:08:39</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Do I need to stop the core to read the dram?</q></li>
<li class="message">[<a href="#T00:08:42" id="T00:08:42"><abbr title="2018-03-20T00:08:42+00:00">00:08:42</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>With core.dram.map?</q></li>
<li class="message">[<abbr title="2018-03-20T00:08:42+00:00">00:08:42</abbr>] &lt;<cite>zmatt</cite>&gt; <q>these mnemonics are weird... I don't understand why they felt the need to give these two different mnemonics in the first place</q></li>
<li class="message">[<a href="#T00:08:46" id="T00:08:46"><abbr title="2018-03-20T00:08:46+00:00">00:08:46</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>certainly not</q></li>
<li class="message">[<a href="#T00:08:51" id="T00:08:51"><abbr title="2018-03-20T00:08:51+00:00">00:08:51</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Ok, cool</q></li>
<li class="message">[<a href="#T00:08:58" id="T00:08:58"><abbr title="2018-03-20T00:08:58+00:00">00:08:58</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>note: you use .map only once using init</q></li>
<li class="message">[<a href="#T00:09:08" id="T00:09:08"><abbr title="2018-03-20T00:09:08+00:00">00:09:08</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>just like the shmem in pruss-ddr-ping</q></li>
<li class="message">[<a href="#T00:09:16" id="T00:09:16"><abbr title="2018-03-20T00:09:16+00:00">00:09:16</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Ok</q></li>
<li class="message">[<a href="#T00:11:16" id="T00:11:16"><abbr title="2018-03-20T00:11:16+00:00">00:11:16</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>For the loop command, I'm getting Error: Instruction illegal with specified core version</q></li>
<li class="message">[<a href="#T00:11:29" id="T00:11:29"><abbr title="2018-03-20T00:11:29+00:00">00:11:29</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>I assume I need to tell PASM I'm using V3 core?</q></li>
<li class="message">[<a href="#T00:11:40" id="T00:11:40"><abbr title="2018-03-20T00:11:40+00:00">00:11:40</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>oh, did I patch my pasm to assume V3 by default? that's possible</q></li>
<li class="message">[<a href="#T00:11:43" id="T00:11:43"><abbr title="2018-03-20T00:11:43+00:00">00:11:43</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>in that case yes, -V3</q></li>
<li class="message">[<a href="#T00:12:00" id="T00:12:00"><abbr title="2018-03-20T00:12:00+00:00">00:12:00</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Error gone</q></li>
<li class="message">[<a href="#T00:12:58" id="T00:12:58"><abbr title="2018-03-20T00:12:58+00:00">00:12:58</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>you can dump the eight words with something like</q></li>
<li class="message">[<a href="#T00:13:00" id="T00:13:00"><abbr title="2018-03-20T00:13:00+00:00">00:13:00</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>print(*("%08x" % x for x in shmem[:]))</q></li>
<li class="join">[<abbr title="2018-03-20T00:13:00+00:00">00:13:00</abbr>] <span>* heratntp (~hewttjdg@2001:bc8:4700:2300::1:d07) has joined #beagle</span></li>
<li class="quit">[<a href="#T00:13:02" id="T00:13:02"><abbr title="2018-03-20T00:13:02+00:00">00:13:02</abbr></a>] <span>* heratntp (~hewttjdg@2001:bc8:4700:2300::1:d07) Quit (Client Quit)</span></li>
<li class="message">[<a href="#T00:13:03" id="T00:13:03"><abbr title="2018-03-20T00:13:03+00:00">00:13:03</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>maybe there's a nicer way</q></li>
<li class="message">[<a href="#T00:16:02" id="T00:16:02"><abbr title="2018-03-20T00:16:02+00:00">00:16:02</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Awesome, I'll try that next. I added this snippet to output the code on the T1 pin.</q></li>
<li class="message">[<a href="#T00:16:18" id="T00:16:18"><abbr title="2018-03-20T00:16:18+00:00">00:16:18</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q><a href="https://pastebin.com/XUahnjBc">https://pastebin.com/XUahnjBc</a></q></li>
<li class="message">[<a href="#T00:16:32" id="T00:16:32"><abbr title="2018-03-20T00:16:32+00:00">00:16:32</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>AND IT WORKS! <a href="https://pasteboard.co/HcH6KoQ.png">https://pasteboard.co/HcH6KoQ.png</a></q></li>
<li class="message">[<a href="#T00:17:06" id="T00:17:06"><abbr title="2018-03-20T00:17:06+00:00">00:17:06</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Excuse the skippy hack</q></li>
<li class="message">[<a href="#T00:23:18" id="T00:23:18"><abbr title="2018-03-20T00:23:18+00:00">00:23:18</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Also, I can see the dram values!</q></li>
<li class="message">[<a href="#T00:23:41" id="T00:23:41"><abbr title="2018-03-20T00:23:41+00:00">00:23:41</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q><a href="https://pastebin.com/rNdt6Pwy">https://pastebin.com/rNdt6Pwy</a></q></li>
<li class="quit">[<a href="#T00:24:39" id="T00:24:39"><abbr title="2018-03-20T00:24:39+00:00">00:24:39</abbr></a>] <span>* majuk (~majuk@75-163-148-173.clsp.qwest.net) Quit (Remote host closed the connection)</span></li>
<li class="message">[<a href="#T00:24:41" id="T00:24:41"><abbr title="2018-03-20T00:24:41+00:00">00:24:41</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q><a href="https://pasteboard.co/HcHa3B2.png">https://pasteboard.co/HcHa3B2.png</a></q></li>
<li class="message">[<a href="#T00:25:31" id="T00:25:31"><abbr title="2018-03-20T00:25:31+00:00">00:25:31</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>:)</q></li>
<li class="message">[<a href="#T00:26:14" id="T00:26:14"><abbr title="2018-03-20T00:26:14+00:00">00:26:14</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>So close!!!!</q></li>
<li class="message">[<a href="#T00:26:24" id="T00:26:24"><abbr title="2018-03-20T00:26:24+00:00">00:26:24</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>I can see the samples!</q></li>
<li class="message">[<a href="#T00:27:15" id="T00:27:15"><abbr title="2018-03-20T00:27:15+00:00">00:27:15</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>So to get it working with the ddr memory, can I modify your ddr-ping and pass the address to the pru with core.r[4] = pruss.ddr.address</q></li>
<li class="message">[<a href="#T00:28:02" id="T00:28:02"><abbr title="2018-03-20T00:28:02+00:00">00:28:02</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Then in the pru do something like sbco r10, r4, 0, 8*4</q></li>
<li class="message">[<a href="#T00:28:24" id="T00:28:24"><abbr title="2018-03-20T00:28:24+00:00">00:28:24</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Except, using the ring buffer technique</q></li>
<li class="message">[<a href="#T00:28:56" id="T00:28:56"><abbr title="2018-03-20T00:28:56+00:00">00:28:56</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>sbbo &amp;r10, r4, ..</q></li>
<li class="message">[<a href="#T00:29:02" id="T00:29:02"><abbr title="2018-03-20T00:29:02+00:00">00:29:02</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>but yes</q></li>
<li class="message">[<a href="#T00:29:15" id="T00:29:15"><abbr title="2018-03-20T00:29:15+00:00">00:29:15</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Why the ampersand?</q></li>
<li class="message">[<a href="#T00:29:39" id="T00:29:39"><abbr title="2018-03-20T00:29:39+00:00">00:29:39</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>you're not storing r10, you're storing 32 bytes starting with r10</q></li>
<li class="message">[<a href="#T00:30:09" id="T00:30:09"><abbr title="2018-03-20T00:30:09+00:00">00:30:09</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>like I said earlier:  sbco &amp;r10, c24, 0, 8*4    is basically   memcpy( c24+0, &amp;r10, 8*4 );   if we pretended for a moment you could pass a pointer into the register file to memcpy</q></li>
<li class="message">[<a href="#T00:30:23" id="T00:30:23"><abbr title="2018-03-20T00:30:23+00:00">00:30:23</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Gotcha, ok</q></li>
<li class="message">[<a href="#T00:31:14" id="T00:31:14"><abbr title="2018-03-20T00:31:14+00:00">00:31:14</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>you can load/store any contiguous byte-range of r0-r30</q></li>
<li class="message">[<a href="#T00:31:50" id="T00:31:50"><abbr title="2018-03-20T00:31:50+00:00">00:31:50</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>(although the time it takes depends on how many registers intersect the byterange you load/store)</q></li>
<li class="message">[<a href="#T00:32:12" id="T00:32:12"><abbr title="2018-03-20T00:32:12+00:00">00:32:12</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Ok,</q></li>
<li class="join">[<a href="#T00:39:27" id="T00:39:27"><abbr title="2018-03-20T00:39:27+00:00">00:39:27</abbr></a>] <span>* nighty- (~nighty@kyotolabs.asahinet.com) has joined #beagleboard</span></li>
<li class="join">[<a href="#T00:43:43" id="T00:43:43"><abbr title="2018-03-20T00:43:43+00:00">00:43:43</abbr></a>] <span>* fortnight (fortnight@ip68-226-150-239.lf.br.cox.net) has joined #beagle</span></li>
<li class="message">[<a href="#T00:45:05" id="T00:45:05"><abbr title="2018-03-20T00:45:05+00:00">00:45:05</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>So at main I'm going to do     mov r3, r4  // store the start of the ring buffer</q></li>
<li class="message">[<a href="#T00:45:52" id="T00:45:52"><abbr title="2018-03-20T00:45:52+00:00">00:45:52</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Then after getting one set of 8 ADC samples something like <a href="https://pastebin.com/7GKMPBM9">https://pastebin.com/7GKMPBM9</a></q></li>
<li class="message">[<a href="#T00:46:34" id="T00:46:34"><abbr title="2018-03-20T00:46:34+00:00">00:46:34</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>add 1 ? increment the pointer by 1 byte? :)</q></li>
<li class="message">[<a href="#T00:47:03" id="T00:47:03"><abbr title="2018-03-20T00:47:03+00:00">00:47:03</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>also don't forget the rather important detail of testing if you're reached the end of the buffer and wrapping back to the start</q></li>
<li class="message">[<a href="#T00:47:17" id="T00:47:17"><abbr title="2018-03-20T00:47:17+00:00">00:47:17</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Oh, yeah</q></li>
<li class="message">[<a href="#T00:47:23" id="T00:47:23"><abbr title="2018-03-20T00:47:23+00:00">00:47:23</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>also, it's absolutely essential to store the head pointer in the same memory as the buffer itself, i.e. ddr in this case</q></li>
<li class="message">[<a href="#T00:47:32" id="T00:47:32"><abbr title="2018-03-20T00:47:32+00:00">00:47:32</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Ok,</q></li>
<li class="message">[<a href="#T00:47:41" id="T00:47:41"><abbr title="2018-03-20T00:47:41+00:00">00:47:41</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>So I'll store it at the very beginning</q></li>
<li class="message">[<a href="#T00:48:31" id="T00:48:31"><abbr title="2018-03-20T00:48:31+00:00">00:48:31</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>So I need add r4, r4, 8*4 right? Since I'm adding 8 new samples each 4 bytes</q></li>
<li class="message">[<a href="#T00:48:38" id="T00:48:38"><abbr title="2018-03-20T00:48:38+00:00">00:48:38</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>yup</q></li>
<li class="message">[<a href="#T00:49:02" id="T00:49:02"><abbr title="2018-03-20T00:49:02+00:00">00:49:02</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>What time is it where you are? It's almost 9pm here.</q></li>
<li class="message">[<a href="#T00:49:15" id="T00:49:15"><abbr title="2018-03-20T00:49:15+00:00">00:49:15</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>01:53</q></li>
<li class="message">[<a href="#T00:49:37" id="T00:49:37"><abbr title="2018-03-20T00:49:37+00:00">00:49:37</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Nice! We'll I really appreciate the help!!!</q></li>
<li class="join">[<a href="#T00:52:28" id="T00:52:28"><abbr title="2018-03-20T00:52:28+00:00">00:52:28</abbr></a>] <span>* majuk (~majuk@75-163-148-173.clsp.qwest.net) has joined #beagle</span></li>
<li class="join">[<a href="#T00:53:13" id="T00:53:13"><abbr title="2018-03-20T00:53:13+00:00">00:53:13</abbr></a>] <span>* xythobuz (~xythobuz@p200300C77BC3400058A079259B0CCEBE.dip0.t-ipconnect.de) has joined #beagle</span></li>
<li class="quit">[<a href="#T00:56:02" id="T00:56:02"><abbr title="2018-03-20T00:56:02+00:00">00:56:02</abbr></a>] <span>* xythobuz_ (~xythobuz@pD9562C2A.dip0.t-ipconnect.de) Quit (Ping timeout: 260 seconds)</span></li>
<li class="quit">[<a href="#T01:07:18" id="T01:07:18"><abbr title="2018-03-20T01:07:18+00:00">01:07:18</abbr></a>] <span>* ayjay_t (ajp@24-181-188-142.dhcp.nwtn.ct.charter.com) Quit (Read error: Connection reset by peer)</span></li>
<li class="join">[<a href="#T01:07:36" id="T01:07:36"><abbr title="2018-03-20T01:07:36+00:00">01:07:36</abbr></a>] <span>* ayjay_t (ajp@24-181-188-142.dhcp.nwtn.ct.charter.com) has joined #beagle</span></li>
<li class="quit">[<a href="#T01:13:34" id="T01:13:34"><abbr title="2018-03-20T01:13:34+00:00">01:13:34</abbr></a>] <span>* russ (foobar@47.151.244.159) Quit (Ping timeout: 268 seconds)</span></li>
<li class="message">[<a href="#T01:19:33" id="T01:19:33"><abbr title="2018-03-20T01:19:33+00:00">01:19:33</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>So, when checking if my buffer is too big, I'm doing     add r4, r4, 8*4            // increment the head of buffer     sub r2, r4, r3             // see how far from start of buffer</q></li>
<li class="message">[<a href="#T01:19:59" id="T01:19:59"><abbr title="2018-03-20T01:19:59+00:00">01:19:59</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>r3 contains the start address, r4 is the current head of the buffer.</q></li>
<li class="message">[<a href="#T01:20:07" id="T01:20:07"><abbr title="2018-03-20T01:20:07+00:00">01:20:07</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>So r2 should be the current size of the buffer.</q></li>
<li class="message">[<a href="#T01:20:32" id="T01:20:32"><abbr title="2018-03-20T01:20:32+00:00">01:20:32</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>I was then going to compare r2 to the allocated buffer size using qbgt</q></li>
<li class="message">[<a href="#T01:20:59" id="T01:20:59"><abbr title="2018-03-20T01:20:59+00:00">01:20:59</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>However, it says that the max operand for qbgt is 255.</q></li>
<li class="message">[<a href="#T01:36:51" id="T01:36:51"><abbr title="2018-03-20T01:36:51+00:00">01:36:51</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>most instructions only support immediate operands in range 0-255</q></li>
<li class="message">[<a href="#T01:36:58" id="T01:36:58"><abbr title="2018-03-20T01:36:58+00:00">01:36:58</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>you can use a register operand instead</q></li>
<li class="message">[<a href="#T01:37:01" id="T01:37:01"><abbr title="2018-03-20T01:37:01+00:00">01:37:01</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>I think I found a work around</q></li>
<li class="message">[<a href="#T01:37:02" id="T01:37:02"><abbr title="2018-03-20T01:37:02+00:00">01:37:02</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Yeah</q></li>
<li class="message">[<a href="#T01:37:19" id="T01:37:19"><abbr title="2018-03-20T01:37:19+00:00">01:37:19</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>or possibly more convenient, keep a pointer to the end of the buffer in register rather than the size</q></li>
<li class="message">[<a href="#T01:37:36" id="T01:37:36"><abbr title="2018-03-20T01:37:36+00:00">01:37:36</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>then you can just test if you've reached the end, and if so reset the pointer to the beginning</q></li>
<li class="message">[<abbr title="2018-03-20T01:37:36+00:00">01:37:36</abbr>] &lt;<cite>hunter235711</cite>&gt; <q>That would work too</q></li>
<li class="message">[<a href="#T01:37:40" id="T01:37:40"><abbr title="2018-03-20T01:37:40+00:00">01:37:40</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Here's what I have <a href="https://pastebin.com/jX0NwPhx">https://pastebin.com/jX0NwPhx</a></q></li>
<li class="message">[<a href="#T01:38:06" id="T01:38:06"><abbr title="2018-03-20T01:38:06+00:00">01:38:06</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>I pass the size of the buffer from python into r1</q></li>
<li class="message">[<a href="#T01:38:31" id="T01:38:31"><abbr title="2018-03-20T01:38:31+00:00">01:38:31</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>that looks way too complicated</q></li>
<li class="message">[<a href="#T01:38:41" id="T01:38:41"><abbr title="2018-03-20T01:38:41+00:00">01:38:41</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Lol,</q></li>
<li class="message">[<a href="#T01:38:46" id="T01:38:46"><abbr title="2018-03-20T01:38:46+00:00">01:38:46</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Yeah</q></li>
<li class="message">[<a href="#T01:39:20" id="T01:39:20"><abbr title="2018-03-20T01:39:20+00:00">01:39:20</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>So maybe I should pass the start address and end instead</q></li>
<li class="message">[<a href="#T01:40:32" id="T01:40:32"><abbr title="2018-03-20T01:40:32+00:00">01:40:32</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Like: core.r[1] = pruss.ddr.address core.r[2] = pruss.ddr.address + BUFFLEN</q></li>
<li class="message">[<a href="#T01:40:48" id="T01:40:48"><abbr title="2018-03-20T01:40:48+00:00">01:40:48</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Where BUFLEN = 1 + (8*4)*10 #10 adc samples</q></li>
<li class="message">[<a href="#T01:40:57" id="T01:40:57"><abbr title="2018-03-20T01:40:57+00:00">01:40:57</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>yeah.  4 +</q></li>
<li class="message">[<a href="#T01:41:34" id="T01:41:34"><abbr title="2018-03-20T01:41:34+00:00">01:41:34</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>The +1 at the beginning is because I was going to store the location of the head at the very beginning of the buffer</q></li>
<li class="message">[<a href="#T01:41:48" id="T01:41:48"><abbr title="2018-03-20T01:41:48+00:00">01:41:48</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>which requires 4 bytes, not 1 byte</q></li>
<li class="message">[<a href="#T01:41:57" id="T01:41:57"><abbr title="2018-03-20T01:41:57+00:00">01:41:57</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Oh yeah....</q></li>
<li class="message">[<a href="#T01:42:10" id="T01:42:10"><abbr title="2018-03-20T01:42:10+00:00">01:42:10</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>C is coming back to byte me</q></li>
<li class="message">[<a href="#T01:42:38" id="T01:42:38"><abbr title="2018-03-20T01:42:38+00:00">01:42:38</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>in C,  ptr + integer     adds  integer * sizeof(*ptr)   to the address</q></li>
<li class="message">[<a href="#T01:42:54" id="T01:42:54"><abbr title="2018-03-20T01:42:54+00:00">01:42:54</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>That makes sense</q></li>
<li class="message">[<a href="#T01:44:54" id="T01:44:54"><abbr title="2018-03-20T01:44:54+00:00">01:44:54</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q><a href="https://pastebin.com/raw/xJajbN0a">https://pastebin.com/raw/xJajbN0a</a></q></li>
<li class="message">[<a href="#T01:45:47" id="T01:45:47"><abbr title="2018-03-20T01:45:47+00:00">01:45:47</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>maybe for alignment it might be better to put the pointer at the end instead</q></li>
<li class="message">[<a href="#T01:46:02" id="T01:46:02"><abbr title="2018-03-20T01:46:02+00:00">01:46:02</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>and let start/end just be the bounds of the ringbuffer</q></li>
<li class="message">[<a href="#T01:46:56" id="T01:46:56"><abbr title="2018-03-20T01:46:56+00:00">01:46:56</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Nice clean code</q></li>
<li class="message">[<a href="#T01:47:12" id="T01:47:12"><abbr title="2018-03-20T01:47:12+00:00">01:47:12</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Yeah, that sounds good</q></li>
<li class="message">[<a href="#T01:48:14" id="T01:48:14"><abbr title="2018-03-20T01:48:14+00:00">01:48:14</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>I'll change 	sbbo	&amp;r4, r2, 0, 4 to sbbo &amp;r3, r2, 0, 4</q></li>
<li class="message">[<a href="#T01:49:13" id="T01:49:13"><abbr title="2018-03-20T01:49:13+00:00">01:49:13</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q><a href="https://pastebin.com/raw/EyXqwJQp">https://pastebin.com/raw/EyXqwJQp</a></q></li>
<li class="message">[<a href="#T01:49:15" id="T01:49:15"><abbr title="2018-03-20T01:49:15+00:00">01:49:15</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>here's that variant</q></li>
<li class="message">[<a href="#T01:49:23" id="T01:49:23"><abbr title="2018-03-20T01:49:23+00:00">01:49:23</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>&amp;r4, r3 you mean</q></li>
<li class="message">[<a href="#T01:50:07" id="T01:50:07"><abbr title="2018-03-20T01:50:07+00:00">01:50:07</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>uhh, sorry, "r4 = r2"</q></li>
<li class="message">[<a href="#T01:50:11" id="T01:50:11"><abbr title="2018-03-20T01:50:11+00:00">01:50:11</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>in the comments at the top</q></li>
<li class="message">[<a href="#T01:50:15" id="T01:50:15"><abbr title="2018-03-20T01:50:15+00:00">01:50:15</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>my bad</q></li>
<li class="message">[<a href="#T01:51:07" id="T01:51:07"><abbr title="2018-03-20T01:51:07+00:00">01:51:07</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>oh yeah</q></li>
<li class="message">[<a href="#T01:52:44" id="T01:52:44"><abbr title="2018-03-20T01:52:44+00:00">01:52:44</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>using macros to name the registers might increase readability</q></li>
<li class="message">[<a href="#T01:52:45" id="T01:52:45"><abbr title="2018-03-20T01:52:45+00:00">01:52:45</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>I don't get this line... //	*(uint32_t *)r3 = r4</q></li>
<li class="message">[<a href="#T01:53:18" id="T01:53:18"><abbr title="2018-03-20T01:53:18+00:00">01:53:18</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>initializes the copy of the head pointer (r4) stored in ddr</q></li>
<li class="message">[<a href="#T01:53:25" id="T01:53:25"><abbr title="2018-03-20T01:53:25+00:00">01:53:25</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Gotcha</q></li>
<li class="message">[<a href="#T01:55:31" id="T01:55:31"><abbr title="2018-03-20T01:55:31+00:00">01:55:31</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>using macros to name the 'global' registers might enhance readability</q></li>
<li class="message">[<a href="#T01:56:01" id="T01:56:01"><abbr title="2018-03-20T01:56:01+00:00">01:56:01</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>(in that case I'd also use high-numbered registers for them, and reserve low-numbered ones for "temporaries")</q></li>
<li class="message">[<a href="#T01:56:41" id="T01:56:41"><abbr title="2018-03-20T01:56:41+00:00">01:56:41</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>You mean like a define statement #define buf_end r22 ?</q></li>
<li class="message">[<a href="#T01:56:50" id="T01:56:50"><abbr title="2018-03-20T01:56:50+00:00">01:56:50</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>for example</q></li>
<li class="message">[<a href="#T01:58:01" id="T01:58:01"><abbr title="2018-03-20T01:58:01+00:00">01:58:01</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>it might also be sensible to pass the buffer parameters via the pru's dram so you don't have to hardcode registers in your initialization code in python</q></li>
<li class="message">[<a href="#T01:58:35" id="T01:58:35"><abbr title="2018-03-20T01:58:35+00:00">01:58:35</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Ok, yeah that makes sense</q></li>
<li class="message">[<a href="#T01:58:57" id="T01:58:57"><abbr title="2018-03-20T01:58:57+00:00">01:58:57</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>I'll do that later after I get the ring buffer working</q></li>
<li class="message">[<a href="#T01:58:58" id="T01:58:58"><abbr title="2018-03-20T01:58:58+00:00">01:58:58</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>the pruss-intc-test.py shows how to</q></li>
<li class="message">[<a href="#T01:59:06" id="T01:59:06"><abbr title="2018-03-20T01:59:06+00:00">01:59:06</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Ok</q></li>
<li class="quit">[<a href="#T02:01:16" id="T02:01:16"><abbr title="2018-03-20T02:01:16+00:00">02:01:16</abbr></a>] <span>* thinkfat (~maw@p4FF0DF8C.dip0.t-ipconnect.de) Quit (Ping timeout: 240 seconds)</span></li>
<li class="message">[<a href="#T02:04:12" id="T02:04:12"><abbr title="2018-03-20T02:04:12+00:00">02:04:12</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>e.g. <a href="https://pastebin.com/raw/nTNFMFLL">https://pastebin.com/raw/nTNFMFLL</a></q></li>
<li class="quit">[<a href="#T02:05:00" id="T02:05:00"><abbr title="2018-03-20T02:05:00+00:00">02:05:00</abbr></a>] <span>* rthille-ciena (~rthille@67.59.199.241) Quit (Quit: Leaving.)</span></li>
<li class="message">[<a href="#T02:06:34" id="T02:06:34"><abbr title="2018-03-20T02:06:34+00:00">02:06:34</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>What does .assign Buf, r18, r19, p do?</q></li>
<li class="join">[<a href="#T02:06:46" id="T02:06:46"><abbr title="2018-03-20T02:06:46+00:00">02:06:46</abbr></a>] <span>* Retr0id (~Retr0id@unaffiliated/retr0id) has joined #beagle</span></li>
<li class="message">[<a href="#T02:07:35" id="T02:07:35"><abbr title="2018-03-20T02:07:35+00:00">02:07:35</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>oh I crap I forgot to fix one 'p' to 'buf'..</q></li>
<li class="message">[<a href="#T02:08:02" id="T02:08:02"><abbr title="2018-03-20T02:08:02+00:00">02:08:02</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>basically it declares a    Buf p;  (should have been   Buf buf;  )  that resides in registers r18-r19</q></li>
<li class="message">[<a href="#T02:08:57" id="T02:08:57"><abbr title="2018-03-20T02:08:57+00:00">02:08:57</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>I'm kinda regretting using the name Buf though now that I'm writing the python side of that example, where I kinda want to use 'buf' for the buffer itself, not its parameters :P</q></li>
<li class="join">[<a href="#T02:09:16" id="T02:09:16"><abbr title="2018-03-20T02:09:16+00:00">02:09:16</abbr></a>] <span>* russ (foobar@47.151.244.159) has joined #beagle</span></li>
<li class="message">[<a href="#T02:12:24" id="T02:12:24"><abbr title="2018-03-20T02:12:24+00:00">02:12:24</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Gotcha</q></li>
<li class="message">[<a href="#T02:13:42" id="T02:13:42"><abbr title="2018-03-20T02:13:42+00:00">02:13:42</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Ok, I think I understand now. I found the TI explanation for Declaring Structure Types</q></li>
<li class="message">[<a href="#T02:14:40" id="T02:14:40"><abbr title="2018-03-20T02:14:40+00:00">02:14:40</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Could they be data types other than u32? I see u16, but what about signed or something?</q></li>
<li class="message">[<a href="#T02:20:55" id="T02:20:55"><abbr title="2018-03-20T02:20:55+00:00">02:20:55</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Nevermind, PRUs don't do signed</q></li>
<li class="message">[<a href="#T02:24:23" id="T02:24:23"><abbr title="2018-03-20T02:24:23+00:00">02:24:23</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>haven't checked this carefully, but something vaguely like this: <a href="https://pastebin.com/raw/7fKLc9Lc">https://pastebin.com/raw/7fKLc9Lc</a> + <a href="https://hastebin.com/tapataqeji.py">https://hastebin.com/tapataqeji.py</a></q></li>
<li class="message">[<a href="#T02:24:56" id="T02:24:56"><abbr title="2018-03-20T02:24:56+00:00">02:24:56</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>oh, i++ isn't valid syntax in python</q></li>
<li class="message">[<a href="#T02:25:02" id="T02:25:02"><abbr title="2018-03-20T02:25:02+00:00">02:25:02</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>well, you know what I mean :P</q></li>
<li class="message">[<a href="#T02:25:13" id="T02:25:13"><abbr title="2018-03-20T02:25:13+00:00">02:25:13</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Yeah!</q></li>
<li class="message">[<a href="#T02:25:43" id="T02:25:43"><abbr title="2018-03-20T02:25:43+00:00">02:25:43</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>there's definitely more than one way to do this, so ultimately it'll be up to personal taste</q></li>
<li class="quit">[<a href="#T02:27:47" id="T02:27:47"><abbr title="2018-03-20T02:27:47+00:00">02:27:47</abbr></a>] <span>* knttl (~knttl@dyndsl-091-096-137-013.ewe-ip-backbone.de) Quit (Ping timeout: 246 seconds)</span></li>
<li class="quit">[<a href="#T02:28:43" id="T02:28:43"><abbr title="2018-03-20T02:28:43+00:00">02:28:43</abbr></a>] <span>* majuk (~majuk@75-163-148-173.clsp.qwest.net) Quit (Remote host closed the connection)</span></li>
<li class="message">[<a href="#T02:29:36" id="T02:29:36"><abbr title="2018-03-20T02:29:36+00:00">02:29:36</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Looking through it now...</q></li>
<li class="join">[<a href="#T02:29:46" id="T02:29:46"><abbr title="2018-03-20T02:29:46+00:00">02:29:46</abbr></a>] <span>* knttl (~knttl@dyndsl-091-096-024-111.ewe-ip-backbone.de) has joined #beagle</span></li>
<li class="message">[<a href="#T02:32:24" id="T02:32:24"><abbr title="2018-03-20T02:32:24+00:00">02:32:24</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>class Shmem( ctypes.Structure ): NameError: name 'ctypes' is not defined</q></li>
<li class="message">[<a href="#T02:32:34" id="T02:32:34"><abbr title="2018-03-20T02:32:34+00:00">02:32:34</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>import ctypes</q></li>
<li class="message">[<abbr title="2018-03-20T02:32:34+00:00">02:32:34</abbr>] &lt;<cite>hunter235711</cite>&gt; <q>I'm getting this error,</q></li>
<li class="message">[<a href="#T02:32:50" id="T02:32:50"><abbr title="2018-03-20T02:32:50+00:00">02:32:50</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Gotcha</q></li>
<li class="quit">[<a href="#T02:32:52" id="T02:32:52"><abbr title="2018-03-20T02:32:52+00:00">02:32:52</abbr></a>] <span>* russ (foobar@47.151.244.159) Quit (Ping timeout: 260 seconds)</span></li>
<li class="message">[<a href="#T02:38:24" id="T02:38:24"><abbr title="2018-03-20T02:38:24+00:00">02:38:24</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Nice!! This is working so well!</q></li>
<li class="join">[<a href="#T02:42:19" id="T02:42:19"><abbr title="2018-03-20T02:42:19+00:00">02:42:19</abbr></a>] <span>* rthille-ciena (~rthille@c-67-164-62-81.hsd1.ca.comcast.net) has joined #beagle</span></li>
<li class="quit">[<a href="#T02:44:15" id="T02:44:15"><abbr title="2018-03-20T02:44:15+00:00">02:44:15</abbr></a>] <span>* ferdna (~ferdna@68-73-71-246.lightspeed.elpstx.sbcglobal.net) Quit (Quit: Leaving)</span></li>
<li class="join">[<a href="#T02:50:50" id="T02:50:50"><abbr title="2018-03-20T02:50:50+00:00">02:50:50</abbr></a>] <span>* russ (foobar@47.151.244.159) has joined #beagle</span></li>
<li class="join">[<a href="#T02:50:51" id="T02:50:51"><abbr title="2018-03-20T02:50:51+00:00">02:50:51</abbr></a>] <span>* ferdna (~ferdna@68-73-71-246.lightspeed.elpstx.sbcglobal.net) has joined #beagle</span></li>
<li class="quit">[<a href="#T02:52:28" id="T02:52:28"><abbr title="2018-03-20T02:52:28+00:00">02:52:28</abbr></a>] <span>* Humpelstilzchen (erik@p2E5B2EF4.dip0.t-ipconnect.de) Quit (Ping timeout: 264 seconds)</span></li>
<li class="quit">[<a href="#T02:52:57" id="T02:52:57"><abbr title="2018-03-20T02:52:57+00:00">02:52:57</abbr></a>] <span>* rthille-ciena (~rthille@c-67-164-62-81.hsd1.ca.comcast.net) Quit (Quit: Leaving.)</span></li>
<li class="join">[<a href="#T02:53:19" id="T02:53:19"><abbr title="2018-03-20T02:53:19+00:00">02:53:19</abbr></a>] <span>* Humpelstilzchen (erik@p2E5B2B54.dip0.t-ipconnect.de) has joined #beagle</span></li>
<li class="join">[<a href="#T02:53:33" id="T02:53:33"><abbr title="2018-03-20T02:53:33+00:00">02:53:33</abbr></a>] <span>* rthille-ciena (~rthille@c-67-164-62-81.hsd1.ca.comcast.net) has joined #beagle</span></li>
<li class="message">[<a href="#T03:02:35" id="T03:02:35"><abbr title="2018-03-20T03:02:35+00:00">03:02:35</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>how does the Shmem class work? In particular     _fields_ = [             ("buf",     c_uint32 * 8 * NUM_SAMPLES),             ("head",    c_uint32),</q></li>
<li class="message">[<a href="#T03:03:10" id="T03:03:10"><abbr title="2018-03-20T03:03:10+00:00">03:03:10</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>buff has length NUM_SAMPLES, not 8*c_uint32*NUM_SAMPLES as I would expect</q></li>
<li class="message">[<a href="#T03:03:12" id="T03:03:12"><abbr title="2018-03-20T03:03:12+00:00">03:03:12</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>ctypes.Structure is how you make structs... it's a bit awkward</q></li>
<li class="message">[<a href="#T03:03:30" id="T03:03:30"><abbr title="2018-03-20T03:03:30+00:00">03:03:30</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>length of size?</q></li>
<li class="message">[<a href="#T03:03:43" id="T03:03:43"><abbr title="2018-03-20T03:03:43+00:00">03:03:43</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>I've declared buf as uint32_t[8][NUM_SAMPLES] there</q></li>
<li class="message">[<a href="#T03:03:57" id="T03:03:57"><abbr title="2018-03-20T03:03:57+00:00">03:03:57</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Got is, so the asterick isn't multipication here?</q></li>
<li class="message">[<a href="#T03:04:17" id="T03:04:17"><abbr title="2018-03-20T03:04:17+00:00">03:04:17</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>*asterisk</q></li>
<li class="message">[<a href="#T03:04:18" id="T03:04:18"><abbr title="2018-03-20T03:04:18+00:00">03:04:18</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>it's the notation ctypes uses for arrays:  type * count</q></li>
<li class="message">[<a href="#T03:04:28" id="T03:04:28"><abbr title="2018-03-20T03:04:28+00:00">03:04:28</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>ok, cool</q></li>
<li class="message">[<a href="#T03:09:11" id="T03:09:11"><abbr title="2018-03-20T03:09:11+00:00">03:09:11</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>One of the 4 bytes of ADC output data is a header (the first 8 bits)</q></li>
<li class="message">[<a href="#T03:09:33" id="T03:09:33"><abbr title="2018-03-20T03:09:33+00:00">03:09:33</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>How easy would it be in python to remove this header (I would be fine with just setting it to 0).</q></li>
<li class="message">[<a href="#T03:09:42" id="T03:09:42"><abbr title="2018-03-20T03:09:42+00:00">03:09:42</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>In c I would use a bitmask</q></li>
<li class="message">[<a href="#T03:09:49" id="T03:09:49"><abbr title="2018-03-20T03:09:49+00:00">03:09:49</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>ditto in python</q></li>
<li class="message">[<a href="#T03:10:05" id="T03:10:05"><abbr title="2018-03-20T03:10:05+00:00">03:10:05</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Is the syntax pretty similar?</q></li>
<li class="message">[<a href="#T03:10:09" id="T03:10:09"><abbr title="2018-03-20T03:10:09+00:00">03:10:09</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>identical</q></li>
<li class="message">[<a href="#T03:10:31" id="T03:10:31"><abbr title="2018-03-20T03:10:31+00:00">03:10:31</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>oh I just realized I used / somewhere in my example, that should be // instead</q></li>
<li class="message">[<a href="#T03:10:38" id="T03:10:38"><abbr title="2018-03-20T03:10:38+00:00">03:10:38</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>= floating point division, // = integer division</q></li>
<li class="message">[<a href="#T03:10:54" id="T03:10:54"><abbr title="2018-03-20T03:10:54+00:00">03:10:54</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Ok, I think it worked anyway.</q></li>
<li class="message">[<a href="#T03:10:55" id="T03:10:55"><abbr title="2018-03-20T03:10:55+00:00">03:10:55</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>/ = floating point division... sorry, irc client gobbled up the / :P</q></li>
<li class="message">[<a href="#T03:11:24" id="T03:11:24"><abbr title="2018-03-20T03:11:24+00:00">03:11:24</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>maybe it works, but using floats there is bad and wrong</q></li>
<li class="message">[<a href="#T03:11:33" id="T03:11:33"><abbr title="2018-03-20T03:11:33+00:00">03:11:33</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Ok</q></li>
<li class="message">[<a href="#T03:12:12" id="T03:12:12"><abbr title="2018-03-20T03:12:12+00:00">03:12:12</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>to be honest I think using a float to index into an array would have justified a TypeError</q></li>
<li class="message">[<a href="#T03:12:17" id="T03:12:17"><abbr title="2018-03-20T03:12:17+00:00">03:12:17</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>To zero the header, for each frame that is read out sholuld I loop through each of the 8 samples and apply a bitmask?</q></li>
<li class="message">[<a href="#T03:12:31" id="T03:12:31"><abbr title="2018-03-20T03:12:31+00:00">03:12:31</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>This seems kind of slow, but might be ok.</q></li>
<li class="message">[<a href="#T03:13:08" id="T03:13:08"><abbr title="2018-03-20T03:13:08+00:00">03:13:08</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>using python probably *is* kind of slow :P</q></li>
<li class="message">[<a href="#T03:13:57" id="T03:13:57"><abbr title="2018-03-20T03:13:57+00:00">03:13:57</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Yeah, I want to plot like 1 second of data (or less) with a signal generator on the ADC input</q></li>
<li class="message">[<a href="#T03:14:37" id="T03:14:37"><abbr title="2018-03-20T03:14:37+00:00">03:14:37</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>well if the buffer is big enough to hold 1 second of data you don't need to worry about processing performance :)</q></li>
<li class="message">[<a href="#T03:14:51" id="T03:14:51"><abbr title="2018-03-20T03:14:51+00:00">03:14:51</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>just run pru for a second, halt it, and then process the buffer</q></li>
<li class="message">[<a href="#T03:14:53" id="T03:14:53"><abbr title="2018-03-20T03:14:53+00:00">03:14:53</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Lol, true.</q></li>
<li class="message">[<a href="#T03:15:24" id="T03:15:24"><abbr title="2018-03-20T03:15:24+00:00">03:15:24</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>What's your estimate for the largest buffer I can make. There is 512mb of ram right?</q></li>
<li class="message">[<a href="#T03:15:43" id="T03:15:43"><abbr title="2018-03-20T03:15:43+00:00">03:15:43</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Not all of which will be available</q></li>
<li class="message">[<a href="#T03:16:03" id="T03:16:03"><abbr title="2018-03-20T03:16:03+00:00">03:16:03</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>like I said, the size of the pru ddr memory can be configured via a module parameter</q></li>
<li class="message">[<a href="#T03:16:10" id="T03:16:10"><abbr title="2018-03-20T03:16:10+00:00">03:16:10</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>I don't know how large it can be made without problems</q></li>
<li class="message">[<a href="#T03:16:28" id="T03:16:28"><abbr title="2018-03-20T03:16:28+00:00">03:16:28</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Do you think 8k samples will be a problem?</q></li>
<li class="message">[<a href="#T03:17:34" id="T03:17:34"><abbr title="2018-03-20T03:17:34+00:00">03:17:34</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>the default is 256 KB</q></li>
<li class="message">[<a href="#T03:18:52" id="T03:18:52"><abbr title="2018-03-20T03:18:52+00:00">03:18:52</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>you can bump it by creating a .conf file in /etc/modprobe.d/ containing:   options uio_pruss extram_pool_sz=SIZE    where SIZE is in bytes</q></li>
<li class="message">[<a href="#T03:19:42" id="T03:19:42"><abbr title="2018-03-20T03:19:42+00:00">03:19:42</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Cool!</q></li>
<li class="join">[<a href="#T03:19:49" id="T03:19:49"><abbr title="2018-03-20T03:19:49+00:00">03:19:49</abbr></a>] <span>* Dunedan_ (~dunedan@unaffiliated/dunedan) has joined #beagle</span></li>
<li class="quit">[<a href="#T03:23:05" id="T03:23:05"><abbr title="2018-03-20T03:23:05+00:00">03:23:05</abbr></a>] <span>* Dunedan (~dunedan@unaffiliated/dunedan) Quit (Ping timeout: 265 seconds)</span></li>
<li class="quit">[<a href="#T03:30:26" id="T03:30:26"><abbr title="2018-03-20T03:30:26+00:00">03:30:26</abbr></a>] <span>* rthille-ciena (~rthille@c-67-164-62-81.hsd1.ca.comcast.net) Quit (Quit: Leaving.)</span></li>
<li class="join">[<a href="#T03:33:29" id="T03:33:29"><abbr title="2018-03-20T03:33:29+00:00">03:33:29</abbr></a>] <span>* rthille-ciena (~rthille@c-67-164-62-81.hsd1.ca.comcast.net) has joined #beagle</span></li>
<li class="quit">[<a href="#T03:33:48" id="T03:33:48"><abbr title="2018-03-20T03:33:48+00:00">03:33:48</abbr></a>] <span>* rthille-ciena (~rthille@c-67-164-62-81.hsd1.ca.comcast.net) Quit (Client Quit)</span></li>
<li class="message">[<a href="#T03:45:36" id="T03:45:36"><abbr title="2018-03-20T03:45:36+00:00">03:45:36</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Getting close: <a href="https://pastebin.com/uF45DxTd">https://pastebin.com/uF45DxTd</a></q></li>
<li class="message">[<a href="#T03:46:06" id="T03:46:06"><abbr title="2018-03-20T03:46:06+00:00">03:46:06</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>I convert the buffer to an numpy array, then make it a signed int32, the left shift 8 bits then right shift 8 bits.</q></li>
<li class="message">[<a href="#T03:47:10" id="T03:47:10"><abbr title="2018-03-20T03:47:10+00:00">03:47:10</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>Not quite right: <a href="https://pasteboard.co/HcIudSN.png">https://pasteboard.co/HcIudSN.png</a></q></li>
<li class="message">[<a href="#T03:47:20" id="T03:47:20"><abbr title="2018-03-20T03:47:20+00:00">03:47:20</abbr></a>] &lt;<cite>hunter235711</cite>&gt; <q>I'm inputting a 10Hz sine wave</q></li>
<li class="join">[<a href="#T03:53:11" id="T03:53:11"><abbr title="2018-03-20T03:53:11+00:00">03:53:11</abbr></a>] <span>* thinkfat (~maw@p579DC379.dip0.t-ipconnect.de) has joined #beagle</span></li>
<li class="join">[<a href="#T04:10:18" id="T04:10:18"><abbr title="2018-03-20T04:10:18+00:00">04:10:18</abbr></a>] <span>* xythobuz_ (~xythobuz@pD9562C2A.dip0.t-ipconnect.de) has joined #beagle</span></li>
<li class="quit">[<a href="#T04:11:58" id="T04:11:58"><abbr title="2018-03-20T04:11:58+00:00">04:11:58</abbr></a>] <span>* xythobuz (~xythobuz@p200300C77BC3400058A079259B0CCEBE.dip0.t-ipconnect.de) Quit (Ping timeout: 252 seconds)</span></li>
<li class="quit">[<a href="#T04:14:10" id="T04:14:10"><abbr title="2018-03-20T04:14:10+00:00">04:14:10</abbr></a>] <span>* thaytan (~thaytan@180-150-118-156.NBN.mel.aussiebb.net) Quit (Ping timeout: 240 seconds)</span></li>
<li class="join">[<a href="#T04:17:09" id="T04:17:09"><abbr title="2018-03-20T04:17:09+00:00">04:17:09</abbr></a>] <span>* thaytan (~thaytan@180-150-118-156.NBN.mel.aussiebb.net) has joined #beagle</span></li>
<li class="quit">[<a href="#T04:20:56" id="T04:20:56"><abbr title="2018-03-20T04:20:56+00:00">04:20:56</abbr></a>] <span>* Marex (~Marex@195.140.253.167) Quit (Ping timeout: 240 seconds)</span></li>
<li class="join">[<a href="#T04:22:38" id="T04:22:38"><abbr title="2018-03-20T04:22:38+00:00">04:22:38</abbr></a>] <span>* Marex (~Marex@195.140.253.167) has joined #beagle</span></li>
<li class="join">[<a href="#T04:30:30" id="T04:30:30"><abbr title="2018-03-20T04:30:30+00:00">04:30:30</abbr></a>] <span>* majuk (~majuk@75-163-148-173.clsp.qwest.net) has joined #beagle</span></li>
<li class="message">[<a href="#T04:34:51" id="T04:34:51"><abbr title="2018-03-20T04:34:51+00:00">04:34:51</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>hunter235711: half of that looks like you're interpreting signed values as if they're unsigned</q></li>
<li class="message">[<a href="#T04:35:10" id="T04:35:10"><abbr title="2018-03-20T04:35:10+00:00">04:35:10</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>so probably the buffer should be an array of c_int32 rather than c_uint32</q></li>
<li class="join">[<a href="#T04:35:18" id="T04:35:18"><abbr title="2018-03-20T04:35:18+00:00">04:35:18</abbr></a>] <span>* Roger_ (6c074aa2@gateway/web/freenode/ip.108.7.74.162) has joined #beagle</span></li>
<li class="message">[<a href="#T04:35:23" id="T04:35:23"><abbr title="2018-03-20T04:35:23+00:00">04:35:23</abbr></a>] &lt;<cite>Roger_</cite>&gt; <q>Hey</q></li>
<li class="quit">[<a href="#T04:35:26" id="T04:35:26"><abbr title="2018-03-20T04:35:26+00:00">04:35:26</abbr></a>] <span>* majuk (~majuk@75-163-148-173.clsp.qwest.net) Quit (Ping timeout: 256 seconds)</span></li>
<li class="message">[<a href="#T04:35:42" id="T04:35:42"><abbr title="2018-03-20T04:35:42+00:00">04:35:42</abbr></a>] &lt;<cite>Roger_</cite>&gt; <q>who should I talk to about sponsorship for an event</q></li>
<li class="message">[<a href="#T04:36:02" id="T04:36:02"><abbr title="2018-03-20T04:36:02+00:00">04:36:02</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>hunter235711: although there seems to be more odd stuff going on</q></li>
<li class="message">[<a href="#T04:36:31" id="T04:36:31"><abbr title="2018-03-20T04:36:31+00:00">04:36:31</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>hunter235711: if I remember correctly from glancing at the datasheet, that header you're masking off contains the channel number right?  maybe double-check for that sanity?</q></li>
<li class="join">[<a href="#T04:37:22" id="T04:37:22"><abbr title="2018-03-20T04:37:22+00:00">04:37:22</abbr></a>] <span>* Rishu (~rishabhj1@42.111.98.23) has joined #beagle</span></li>
<li class="message">[<a href="#T04:39:06" id="T04:39:06"><abbr title="2018-03-20T04:39:06+00:00">04:39:06</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>hunter235711: also, you're trying to slurp the entire buffer while pru is still actively writing data, so that's going to cause a discontinuity at the very least</q></li>
<li class="quit">[<a href="#T04:39:24" id="T04:39:24"><abbr title="2018-03-20T04:39:24+00:00">04:39:24</abbr></a>] <span>* Rishu (~rishabhj1@42.111.98.23) Quit (Remote host closed the connection)</span></li>
<li class="message">[<a href="#T04:40:04" id="T04:40:04"><abbr title="2018-03-20T04:40:04+00:00">04:40:04</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>halt the core, then check the head, and concatenate the [head:] and [:head] slices</q></li>
<li class="quit">[<a href="#T04:40:28" id="T04:40:28"><abbr title="2018-03-20T04:40:28+00:00">04:40:28</abbr></a>] <span>* Roger_ (6c074aa2@gateway/web/freenode/ip.108.7.74.162) Quit (Ping timeout: 260 seconds)</span></li>
<li class="message">[<a href="#T04:42:03" id="T04:42:03"><abbr title="2018-03-20T04:42:03+00:00">04:42:03</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>hunter235711: also your masking function looks like a nop to me</q></li>
<li class="message">[<a href="#T04:42:37" id="T04:42:37"><abbr title="2018-03-20T04:42:37+00:00">04:42:37</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>maybe, not sure how numpy behaves if you do this</q></li>
<li class="quit">[<a href="#T04:45:10" id="T04:45:10"><abbr title="2018-03-20T04:45:10+00:00">04:45:10</abbr></a>] <span>* rizzo (~RizzoTheR@p54B6B1EE.dip0.t-ipconnect.de) Quit (Ping timeout: 240 seconds)</span></li>
<li class="quit">[<a href="#T04:48:53" id="T04:48:53"><abbr title="2018-03-20T04:48:53+00:00">04:48:53</abbr></a>] <span>* ferdna (~ferdna@68-73-71-246.lightspeed.elpstx.sbcglobal.net) Quit (Quit: Leaving)</span></li>
<li class="message">[<a href="#T04:50:01" id="T04:50:01"><abbr title="2018-03-20T04:50:01+00:00">04:50:01</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>I think you just want    np.asarray(shmem.buf, dtype=np.int32) &lt;&lt; 8 &gt;&gt; 8</q></li>
<li class="message">[<a href="#T04:50:21" id="T04:50:21"><abbr title="2018-03-20T04:50:21+00:00">04:50:21</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>assuming the data is actually signed</q></li>
<li class="message">[<a href="#T04:51:46" id="T04:51:46"><abbr title="2018-03-20T04:51:46+00:00">04:51:46</abbr></a>] &lt;<cite>zmatt</cite>&gt; <q>ok it's signed</q></li>
<li class="join">[<a href="#T05:07:31" id="T05:07:31"><abbr title="2018-03-20T05:07:31+00:00">05:07:31</abbr></a>] <span>* Ceriand|desktop (~Ceriand@unaffiliated/ceriand) has joined #beagle</span></li>
<li class="quit">[<a href="#T05:16:48" id="T05:16:48"><abbr title="2018-03-20T05:16:48+00:00">05:16:48</abbr></a>] <span>* CrazyEddy (crazyed@wrongplanet/CrazyEddy) Quit (Ping timeout: 248 seconds)</span></li>
<li class="join">[<a href="#T05:24:59" id="T05:24:59"><abbr title="2018-03-20T05:24:59+00:00">05:24:59</abbr></a>] <span>* rob_w (~rob@unaffiliated/rob-w/x-1112029) has joined #beagle</span></li>
<li class="quit">[<a href="#T05:30:34" id="T05:30:34"><abbr title="2018-03-20T05:30:34+00:00">05:30:34</abbr></a>] <span>* RevPete (~RevPete@infracaninophile.pl.id.au) Quit (Remote host closed the connection)</span></li>
<li class="join">[<a href="#T05:32:42" id="T05:32:42"><abbr title="2018-03-20T05:32:42+00:00">05:32:42</abbr></a>] <span>* RevPete (~RevPete@infracaninophile.pl.id.au) has joined #beagle</span></li>
<li class="nick-change">[<a href="#T05:32:55" id="T05:32:55"><abbr title="2018-03-20T05:32:55+00:00">05:32:55</abbr></a>] <span>* RevPete is now known as plaw</span></li>
<li class="join">[<a href="#T05:38:44" id="T05:38:44"><abbr title="2018-03-20T05:38:44+00:00">05:38:44</abbr></a>] <span>* CrazyEddy (crazyed@wrongplanet/CrazyEddy) has joined #beagle</span></li>
